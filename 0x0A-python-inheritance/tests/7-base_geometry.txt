module Base Geometry
====================

Use of BaseGeometry class:
--------------------------

import BaseGeometry class:
>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

usage of integer_validator
--------------------------

Instantiation and basic usage:
>>> baseGeo = BaseGeometry()
>>> baseGeo.integer_validator("my_int", 12)

case value is not integer:
>>> baseGeo.integer_validator("my_int", "12")
Traceback (most recent call last):
...
TypeError: my_int must be an integer

case value is a tuple:
>>> baseGeo.integer_validator("age", (4,))
Traceback (most recent call last):
...
TypeError: age must be an integer

case value is a list:
>>> baseGeo.integer_validator("age", [4])
Traceback (most recent call last):
...
TypeError: age must be an integer

case value is a boolean:
>>> baseGeo.integer_validator("age", True)
Traceback (most recent call last):
...
TypeError: age must be an integer

case value is a set:
>>> baseGeo.integer_validator("age", {3, 4})
Traceback (most recent call last):
...
TypeError: age must be an integer

case value is None:
>>> baseGeo.integer_validator("age", None)
Traceback (most recent call last):
...
TypeError: age must be an integer

case value is less than 0:
>>> baseGeo.integer_validator("my_age", -14)
Traceback (most recent call last):
...
ValueError: my_age must be greater than 0

case value is equal to 0:
>>> baseGeo.integer_validator("my_amount", 0)
Traceback (most recent call last):
...
ValueError: my_amount must be greater than 0

case value is infinity:
>>> baseGeo.integer_validator("my_amount", float('inf'))
Traceback (most recent call last):
...
TypeError: my_amount must be an integer

case no parameter is given:
>>> baseGeo.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'


Usage of area:
>>> baseGeo.area()
Traceback (most recent call last):
...
Exception: area() is not implemented
