Module Matrix divided
=====================

Using matrix divided
--------------------

import matrix_divided module
>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

initialisation of matrix:
>>> matrix = [[1, 2, 3], [4, 5, 6]]

case div equal 0:
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

case matrix content is not a list of integers/float:
>>> matrix[0][2] = "School"
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

case div is flat('inf'):
>>> matrix[0][2] = 3
>>> matrix_divided(matrix, float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

case of basic usage:
matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

case div is a float:
>>> matrix_divided(matrix, 1.5)
[[0.67, 1.33, 2.0], [2.67, 3.33, 4.0]]

case div is a string:
>>> matrix_divided(matrix, "2")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/ipyao/Desktop/alx-higher_level_programming/0x07-python-test_driven_development/2-matrix_divided.py", line 21, in matrix_divided
    raise TypeError("div must be a number")
TypeError: div must be a number

case row of matrix has different lenght:
>>> matrix[1].append(11)
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/ipyao/Desktop/alx-higher_level_programming/0x07-python-test_driven_development/2-matrix_divided.py", line 30, in matrix_divided
    raise TypeError(msgE)
TypeError: Each row of the matrix must have the same size

case no parameter:
>>> matrix[1].pop()
>>> matrix_divided()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
